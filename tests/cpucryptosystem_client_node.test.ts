import { expect, test } from 'vitest';

import { NodeJsTCPComputer } from '../src/network/NodeJsTCPComputer';
import { HTTPRelayComputer } from '../src/network/HTTPRelayComputer';
import { make_cpu_crypto_system_rsa_reencryptor_client_node } from '../src/network/CPUCryptoSystemRSAReencryptorClientNode';
import {
  ComputeOperation,
  ComputeOperationInstance,
  ComputeOperationOperand,
  ComputeOperationType,
  ComputeRequest,
  ComputeResponseStatus,
  DataEncryptionType,
  DataType,
} from '../src/network/ComputeRequestResponse';

const ITERATIONS = 25;

test('CPUCryptoSystemRSAReencryptorClientNode', async () => {
  const computers = [
    new HTTPRelayComputer('http://127.0.0.1:8000/api/v1/openvector/rpc/'),
    new NodeJsTCPComputer('127.0.0.1', 4455),
  ];
  for (const computer of computers) {
    await computer.connect();
    const clientNode =
      await make_cpu_crypto_system_rsa_reencryptor_client_node(computer);

    const cs = clientNode.cryptosystem;
    const reencryptor = clientNode.reencryptor;
    const pk = clientNode.network_encryption_key;
    for (let i = 0; i < ITERATIONS; i++) {
      const m1 = cs.make_plaintext(
        BigInt(Math.ceil(Math.random() * 10000)) % 2n ** 32n,
      );
      const m2 = cs.make_plaintext(
        BigInt(Math.ceil(Math.random() * 10000)) % 2n ** 32n,
      );
      const c1 = cs.encrypt(pk, m1);
      const c2 = cs.encrypt(pk, m2);

      const comp_req = new ComputeRequest(
        new ComputeOperationInstance(
          ComputeOperationType.BINARY,
          ComputeOperation.MULTIPLY,
          [
            new ComputeOperationOperand(
              DataType.SINGLE,
              DataEncryptionType.CIPHERTEXT,
              cs.serialize_ciphertext(c1),
            ),
            new ComputeOperationOperand(
              DataType.SINGLE,
              DataEncryptionType.CIPHERTEXT,
              cs.serialize_ciphertext(c2),
            ),
          ],
        ),
      );
      const comp_res = await clientNode.compute(comp_req);
      if (comp_res.status === ComputeResponseStatus.ERROR) {
        throw new Error('Error in compute response');
      }
      const c = cs.deserialize_ciphertext(comp_res.data);

      const rp = await reencryptor.generate_reencryption_key_pair();
      const rpk = rp.public_key;
      const rsk = rp.secret_key;

      const req = new ComputeRequest(
        new ComputeOperationInstance(
          ComputeOperationType.BINARY,
          ComputeOperation.REENCRYPT,
          [
            new ComputeOperationOperand(
              DataType.SINGLE,
              DataEncryptionType.CIPHERTEXT,
              cs.serialize_ciphertext(c),
            ),
            new ComputeOperationOperand(
              DataType.SINGLE,
              DataEncryptionType.PLAINTEXT,
              await reencryptor.serialize_reencryption_public_key(rpk),
            ),
          ],
        ),
      );
      const res = await clientNode.compute(req);
      if (res.status === ComputeResponseStatus.ERROR) {
        throw new Error('Error in compute response');
      }
      const reencrypted_pds = res.data;
      const splitted_reencrypted_pds =
        await reencryptor.split_reencrypted_partial_decryption_results(
          reencrypted_pds,
        );
      const dm = await reencryptor.decrypt(splitted_reencrypted_pds, c, rsk);
      expect(dm.m).toEqual(m1.m * m2.m);
    }
  }
});

// test('CPUCryptoSystemRSAReencryptorClientNode - Error', async () => {
//   const ser_user_priv_key = new Uint8Array([
//     48, 130, 9, 68, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1,
//     5, 0, 4, 130, 9, 46, 48, 130, 9, 42, 2, 1, 0, 2, 130, 2, 1, 0, 151, 135, 92,
//     181, 54, 130, 208, 99, 95, 24, 132, 230, 9, 174, 0, 190, 238, 131, 142, 232,
//     25, 66, 231, 113, 54, 153, 51, 131, 151, 246, 77, 10, 177, 236, 164, 94,
//     163, 28, 59, 109, 239, 98, 176, 88, 107, 119, 24, 125, 132, 113, 34, 177,
//     195, 222, 87, 69, 137, 188, 204, 27, 87, 184, 208, 38, 134, 244, 103, 242,
//     118, 187, 142, 55, 70, 17, 131, 137, 183, 199, 49, 96, 54, 102, 51, 109,
//     128, 37, 16, 54, 149, 128, 89, 116, 184, 180, 27, 236, 250, 144, 77, 204,
//     236, 242, 162, 180, 164, 138, 112, 47, 171, 15, 250, 137, 48, 143, 47, 21,
//     96, 48, 104, 110, 224, 13, 128, 42, 83, 118, 0, 197, 241, 195, 132, 30, 57,
//     100, 159, 34, 242, 129, 8, 211, 204, 254, 171, 45, 49, 195, 65, 161, 75, 7,
//     221, 81, 73, 119, 143, 109, 214, 144, 208, 148, 183, 250, 8, 167, 12, 181,
//     116, 68, 110, 134, 249, 168, 70, 209, 80, 94, 61, 171, 20, 201, 153, 152,
//     105, 231, 10, 202, 117, 99, 149, 233, 182, 31, 45, 8, 116, 81, 112, 170,
//     162, 165, 139, 7, 35, 229, 171, 135, 65, 15, 110, 189, 137, 100, 225, 209,
//     149, 97, 131, 191, 164, 28, 147, 1, 204, 29, 87, 228, 184, 10, 6, 215, 207,
//     29, 245, 147, 96, 163, 238, 51, 184, 21, 199, 207, 230, 82, 94, 210, 45,
//     247, 21, 162, 188, 100, 58, 218, 239, 214, 74, 145, 124, 161, 82, 28, 162,
//     106, 236, 234, 189, 212, 120, 45, 127, 68, 171, 233, 157, 184, 14, 60, 214,
//     117, 124, 234, 57, 20, 19, 176, 173, 94, 159, 248, 199, 44, 202, 195, 3, 59,
//     192, 197, 70, 158, 187, 118, 63, 176, 169, 102, 201, 244, 180, 45, 42, 96,
//     68, 188, 112, 174, 33, 194, 171, 117, 105, 250, 8, 187, 144, 83, 10, 158,
//     228, 200, 85, 165, 234, 31, 223, 98, 166, 204, 211, 229, 50, 124, 175, 215,
//     176, 100, 236, 191, 108, 74, 134, 62, 252, 136, 74, 115, 112, 157, 141, 239,
//     78, 72, 251, 16, 45, 82, 224, 159, 217, 13, 140, 208, 187, 144, 248, 183,
//     217, 44, 227, 203, 125, 222, 119, 195, 118, 179, 235, 10, 254, 63, 20, 215,
//     224, 184, 12, 43, 135, 254, 87, 128, 50, 95, 39, 203, 135, 222, 23, 106, 81,
//     228, 7, 160, 51, 225, 0, 174, 248, 145, 76, 170, 136, 57, 6, 53, 38, 116,
//     223, 32, 194, 76, 232, 101, 176, 237, 36, 246, 143, 142, 187, 145, 213, 185,
//     105, 57, 223, 213, 49, 152, 205, 63, 34, 248, 171, 13, 95, 122, 239, 151,
//     175, 201, 68, 113, 227, 46, 98, 6, 223, 21, 135, 0, 241, 81, 193, 85, 222,
//     188, 37, 188, 165, 229, 76, 90, 88, 161, 162, 228, 88, 254, 196, 84, 14, 48,
//     26, 147, 208, 172, 5, 8, 214, 58, 204, 142, 56, 38, 56, 92, 162, 234, 222,
//     64, 27, 205, 2, 3, 1, 0, 1, 2, 130, 2, 0, 3, 47, 62, 108, 224, 137, 188,
//     154, 26, 9, 136, 140, 39, 197, 65, 188, 22, 217, 212, 245, 179, 199, 138,
//     216, 84, 238, 192, 167, 188, 173, 217, 205, 251, 188, 158, 199, 185, 13,
//     216, 44, 144, 162, 11, 170, 186, 183, 116, 181, 163, 238, 236, 194, 103,
//     167, 104, 150, 33, 138, 236, 228, 139, 140, 192, 29, 207, 42, 241, 30, 251,
//     98, 125, 179, 254, 88, 253, 54, 182, 103, 98, 160, 239, 3, 190, 216, 242,
//     73, 213, 30, 187, 56, 72, 169, 1, 254, 17, 178, 215, 246, 147, 22, 172, 201,
//     124, 164, 145, 235, 92, 61, 142, 228, 32, 105, 36, 93, 115, 83, 222, 88, 80,
//     196, 57, 25, 58, 52, 84, 47, 96, 7, 115, 158, 158, 246, 222, 80, 149, 183,
//     154, 78, 115, 237, 10, 69, 223, 229, 193, 236, 164, 152, 117, 220, 141, 200,
//     216, 227, 193, 9, 65, 234, 123, 226, 100, 64, 198, 80, 113, 199, 238, 122,
//     241, 178, 97, 212, 211, 136, 47, 244, 53, 191, 148, 9, 152, 156, 199, 103,
//     170, 81, 14, 243, 218, 44, 11, 62, 121, 210, 122, 84, 171, 213, 127, 141,
//     147, 26, 108, 165, 96, 92, 38, 0, 142, 92, 149, 98, 160, 12, 83, 142, 10,
//     109, 117, 249, 126, 109, 111, 62, 19, 246, 206, 151, 92, 176, 31, 19, 139,
//     113, 180, 36, 232, 128, 171, 23, 20, 194, 157, 200, 144, 13, 152, 23, 10,
//     156, 7, 156, 56, 251, 24, 241, 233, 10, 148, 92, 70, 195, 118, 209, 102, 46,
//     179, 178, 6, 167, 241, 146, 116, 14, 208, 222, 161, 203, 40, 225, 180, 133,
//     57, 17, 121, 54, 94, 220, 206, 242, 222, 98, 53, 34, 209, 104, 165, 182,
//     184, 152, 95, 78, 197, 13, 143, 84, 188, 71, 150, 120, 236, 229, 196, 22,
//     141, 60, 33, 214, 22, 158, 132, 158, 130, 163, 228, 28, 171, 210, 159, 78,
//     19, 25, 243, 151, 94, 198, 63, 148, 88, 80, 132, 35, 99, 141, 216, 184, 203,
//     63, 63, 199, 244, 216, 97, 195, 199, 88, 214, 23, 129, 190, 43, 116, 102,
//     100, 111, 127, 188, 154, 201, 236, 160, 24, 12, 230, 31, 78, 244, 19, 110,
//     116, 64, 27, 240, 146, 38, 21, 245, 116, 162, 227, 176, 191, 131, 189, 158,
//     27, 103, 88, 233, 92, 179, 74, 97, 136, 153, 89, 66, 186, 42, 206, 204, 87,
//     154, 40, 107, 109, 84, 2, 180, 182, 204, 65, 12, 199, 108, 35, 226, 32, 83,
//     6, 180, 38, 45, 35, 122, 222, 60, 171, 153, 205, 242, 158, 154, 208, 217,
//     253, 237, 129, 102, 9, 52, 142, 143, 25, 28, 129, 12, 250, 94, 205, 89, 135,
//     186, 128, 181, 29, 3, 113, 80, 126, 236, 55, 241, 220, 178, 240, 20, 154,
//     123, 249, 120, 6, 20, 77, 45, 5, 166, 254, 192, 219, 197, 44, 77, 124, 204,
//     79, 187, 155, 154, 218, 16, 2, 233, 240, 77, 155, 102, 54, 254, 158, 26, 81,
//     2, 130, 1, 1, 0, 198, 78, 103, 39, 226, 162, 241, 112, 175, 99, 203, 114,
//     63, 161, 40, 241, 254, 109, 197, 99, 183, 186, 129, 127, 199, 164, 148, 33,
//     48, 165, 22, 199, 116, 160, 122, 230, 89, 135, 219, 207, 88, 152, 24, 3, 40,
//     227, 40, 93, 238, 149, 187, 138, 74, 34, 218, 155, 32, 77, 92, 48, 255, 20,
//     229, 202, 92, 225, 90, 104, 251, 29, 213, 61, 152, 83, 127, 173, 231, 49,
//     220, 185, 10, 26, 13, 222, 143, 121, 235, 97, 33, 126, 60, 207, 216, 138,
//     133, 43, 86, 18, 2, 35, 126, 201, 218, 56, 108, 243, 157, 194, 193, 192, 61,
//     158, 199, 81, 107, 74, 73, 189, 228, 61, 84, 54, 196, 192, 145, 113, 199,
//     82, 36, 27, 153, 58, 102, 113, 39, 12, 193, 33, 140, 46, 255, 182, 50, 120,
//     121, 209, 163, 7, 149, 170, 115, 70, 96, 197, 170, 235, 111, 67, 156, 172,
//     188, 38, 205, 90, 19, 4, 62, 127, 30, 65, 238, 227, 174, 124, 123, 237, 89,
//     42, 208, 57, 101, 104, 79, 239, 117, 61, 144, 246, 90, 81, 232, 209, 88, 78,
//     218, 225, 0, 50, 5, 9, 92, 225, 220, 54, 196, 69, 13, 10, 69, 169, 51, 177,
//     120, 182, 127, 234, 15, 251, 13, 76, 219, 254, 163, 237, 112, 152, 221, 50,
//     27, 128, 235, 173, 238, 73, 133, 248, 131, 90, 51, 9, 210, 60, 164, 35, 91,
//     225, 26, 235, 60, 67, 115, 195, 75, 127, 159, 67, 2, 130, 1, 1, 0, 195, 157,
//     7, 207, 24, 201, 50, 46, 24, 212, 169, 99, 132, 194, 81, 233, 139, 202, 186,
//     82, 91, 33, 237, 117, 19, 101, 81, 109, 97, 245, 132, 166, 240, 235, 65,
//     170, 166, 209, 91, 81, 79, 67, 141, 113, 181, 109, 217, 205, 84, 137, 3, 52,
//     32, 24, 15, 21, 128, 81, 24, 115, 101, 45, 144, 70, 20, 213, 232, 29, 73, 5,
//     163, 139, 87, 186, 6, 200, 235, 162, 249, 239, 142, 86, 154, 127, 61, 234,
//     201, 48, 159, 3, 176, 44, 248, 67, 250, 19, 42, 69, 255, 150, 15, 1, 148,
//     108, 206, 132, 90, 234, 174, 242, 197, 185, 184, 224, 47, 134, 130, 6, 87,
//     48, 200, 107, 220, 175, 127, 25, 138, 225, 150, 122, 107, 27, 31, 140, 209,
//     176, 131, 254, 61, 224, 66, 22, 241, 173, 227, 89, 82, 165, 171, 248, 101,
//     203, 174, 6, 250, 31, 92, 197, 252, 151, 8, 157, 105, 248, 77, 22, 90, 148,
//     230, 159, 206, 127, 8, 25, 111, 198, 169, 186, 102, 67, 82, 115, 135, 89,
//     175, 175, 31, 252, 63, 28, 72, 168, 17, 146, 221, 210, 23, 245, 178, 68, 49,
//     171, 244, 86, 55, 219, 202, 232, 117, 3, 155, 88, 107, 109, 128, 60, 174,
//     66, 224, 231, 18, 63, 194, 73, 100, 99, 190, 187, 220, 29, 10, 218, 230,
//     108, 138, 47, 169, 91, 249, 248, 243, 122, 115, 243, 56, 188, 29, 223, 32,
//     149, 96, 70, 38, 0, 127, 175, 2, 130, 1, 1, 0, 137, 35, 107, 63, 48, 2, 83,
//     74, 4, 96, 213, 47, 27, 69, 206, 85, 28, 8, 185, 186, 238, 50, 50, 160, 53,
//     102, 97, 114, 90, 123, 176, 183, 26, 182, 104, 135, 168, 94, 197, 234, 44,
//     112, 114, 26, 173, 73, 250, 126, 139, 34, 77, 97, 163, 71, 91, 58, 112, 42,
//     79, 153, 42, 174, 63, 3, 165, 27, 203, 52, 82, 133, 29, 20, 205, 164, 224,
//     229, 88, 191, 40, 207, 102, 103, 2, 52, 105, 176, 124, 208, 221, 34, 185,
//     215, 90, 254, 224, 125, 73, 182, 134, 120, 25, 148, 106, 47, 31, 89, 146,
//     62, 63, 83, 60, 201, 243, 57, 33, 35, 108, 191, 191, 121, 146, 37, 150, 7,
//     62, 14, 27, 51, 120, 249, 5, 12, 88, 15, 228, 91, 115, 172, 73, 143, 175,
//     19, 70, 239, 253, 254, 181, 233, 230, 220, 203, 127, 94, 41, 20, 188, 96,
//     99, 183, 147, 213, 66, 88, 60, 244, 109, 184, 242, 155, 240, 40, 206, 151,
//     186, 74, 209, 167, 26, 110, 137, 98, 209, 178, 133, 252, 228, 40, 189, 213,
//     84, 83, 215, 130, 100, 118, 5, 167, 230, 239, 136, 188, 13, 14, 7, 105, 207,
//     254, 230, 157, 170, 23, 175, 161, 181, 67, 220, 144, 84, 163, 172, 5, 111,
//     161, 217, 240, 70, 38, 162, 34, 87, 19, 165, 98, 230, 193, 153, 76, 237, 49,
//     226, 150, 219, 140, 255, 78, 232, 235, 126, 198, 92, 55, 80, 85, 131, 218,
//     149, 2, 130, 1, 1, 0, 135, 161, 156, 229, 130, 153, 22, 123, 17, 234, 122,
//     92, 175, 147, 144, 250, 47, 92, 108, 158, 103, 227, 249, 98, 161, 5, 50, 85,
//     118, 131, 166, 235, 157, 198, 113, 44, 163, 40, 44, 122, 15, 76, 150, 137,
//     78, 52, 17, 189, 166, 44, 174, 20, 249, 95, 213, 45, 162, 96, 24, 101, 2,
//     181, 122, 0, 173, 183, 183, 142, 126, 176, 51, 58, 141, 164, 69, 202, 16,
//     96, 91, 142, 55, 146, 98, 227, 113, 10, 23, 95, 232, 17, 197, 153, 24, 183,
//     1, 113, 66, 113, 112, 139, 26, 114, 140, 248, 120, 165, 26, 232, 248, 79,
//     10, 188, 0, 173, 41, 38, 201, 135, 29, 243, 140, 52, 5, 187, 133, 148, 47,
//     80, 197, 102, 178, 87, 7, 36, 59, 204, 121, 104, 210, 124, 105, 54, 193,
//     114, 65, 94, 16, 201, 32, 153, 69, 243, 217, 1, 171, 114, 13, 128, 149, 232,
//     31, 40, 14, 111, 4, 252, 71, 232, 80, 148, 99, 184, 126, 228, 44, 53, 130,
//     63, 229, 98, 46, 140, 62, 63, 248, 105, 163, 242, 225, 203, 121, 177, 87,
//     38, 15, 57, 250, 52, 248, 219, 1, 217, 233, 187, 210, 85, 74, 182, 173, 83,
//     199, 229, 161, 239, 53, 232, 93, 39, 176, 11, 104, 2, 223, 114, 197, 241,
//     199, 49, 56, 168, 198, 123, 11, 36, 29, 24, 121, 4, 118, 41, 160, 160, 186,
//     62, 221, 138, 201, 231, 137, 15, 41, 198, 217, 216, 164, 175, 2, 130, 1, 1,
//     0, 171, 113, 86, 111, 221, 71, 68, 229, 218, 108, 244, 230, 216, 136, 235,
//     54, 254, 148, 181, 203, 250, 10, 37, 220, 204, 74, 20, 235, 187, 192, 140,
//     207, 50, 4, 253, 183, 216, 215, 245, 40, 59, 170, 112, 172, 240, 47, 161,
//     78, 20, 99, 141, 173, 96, 140, 157, 194, 156, 63, 203, 94, 103, 10, 63, 159,
//     151, 127, 186, 172, 110, 81, 17, 235, 25, 51, 32, 218, 126, 162, 252, 159,
//     198, 214, 102, 66, 43, 100, 110, 25, 153, 54, 111, 82, 199, 220, 189, 239,
//     142, 131, 65, 14, 66, 251, 132, 84, 142, 111, 77, 202, 168, 215, 15, 156,
//     152, 36, 43, 60, 113, 100, 24, 13, 141, 188, 144, 178, 51, 43, 110, 247,
//     191, 100, 59, 149, 182, 97, 26, 248, 104, 167, 37, 201, 52, 187, 2, 208, 94,
//     223, 165, 195, 44, 109, 101, 109, 166, 87, 78, 144, 213, 125, 71, 177, 72,
//     59, 245, 59, 66, 243, 71, 186, 122, 133, 140, 9, 171, 252, 88, 3, 97, 245,
//     96, 222, 222, 192, 202, 9, 88, 43, 28, 37, 131, 41, 169, 58, 205, 176, 94,
//     211, 169, 107, 14, 88, 239, 118, 4, 230, 68, 217, 88, 36, 158, 171, 182, 27,
//     38, 252, 62, 162, 225, 174, 12, 47, 107, 150, 141, 79, 236, 153, 224, 161,
//     1, 142, 233, 178, 210, 148, 111, 91, 181, 179, 200, 218, 83, 6, 221, 33,
//     242, 46, 223, 166, 161, 34, 241, 190, 114, 172, 48, 221,
//   ]);

//   const ser_user_pub_key = new Uint8Array([
//     48, 130, 2, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3,
//     130, 2, 15, 0, 48, 130, 2, 10, 2, 130, 2, 1, 0, 151, 135, 92, 181, 54, 130,
//     208, 99, 95, 24, 132, 230, 9, 174, 0, 190, 238, 131, 142, 232, 25, 66, 231,
//     113, 54, 153, 51, 131, 151, 246, 77, 10, 177, 236, 164, 94, 163, 28, 59,
//     109, 239, 98, 176, 88, 107, 119, 24, 125, 132, 113, 34, 177, 195, 222, 87,
//     69, 137, 188, 204, 27, 87, 184, 208, 38, 134, 244, 103, 242, 118, 187, 142,
//     55, 70, 17, 131, 137, 183, 199, 49, 96, 54, 102, 51, 109, 128, 37, 16, 54,
//     149, 128, 89, 116, 184, 180, 27, 236, 250, 144, 77, 204, 236, 242, 162, 180,
//     164, 138, 112, 47, 171, 15, 250, 137, 48, 143, 47, 21, 96, 48, 104, 110,
//     224, 13, 128, 42, 83, 118, 0, 197, 241, 195, 132, 30, 57, 100, 159, 34, 242,
//     129, 8, 211, 204, 254, 171, 45, 49, 195, 65, 161, 75, 7, 221, 81, 73, 119,
//     143, 109, 214, 144, 208, 148, 183, 250, 8, 167, 12, 181, 116, 68, 110, 134,
//     249, 168, 70, 209, 80, 94, 61, 171, 20, 201, 153, 152, 105, 231, 10, 202,
//     117, 99, 149, 233, 182, 31, 45, 8, 116, 81, 112, 170, 162, 165, 139, 7, 35,
//     229, 171, 135, 65, 15, 110, 189, 137, 100, 225, 209, 149, 97, 131, 191, 164,
//     28, 147, 1, 204, 29, 87, 228, 184, 10, 6, 215, 207, 29, 245, 147, 96, 163,
//     238, 51, 184, 21, 199, 207, 230, 82, 94, 210, 45, 247, 21, 162, 188, 100,
//     58, 218, 239, 214, 74, 145, 124, 161, 82, 28, 162, 106, 236, 234, 189, 212,
//     120, 45, 127, 68, 171, 233, 157, 184, 14, 60, 214, 117, 124, 234, 57, 20,
//     19, 176, 173, 94, 159, 248, 199, 44, 202, 195, 3, 59, 192, 197, 70, 158,
//     187, 118, 63, 176, 169, 102, 201, 244, 180, 45, 42, 96, 68, 188, 112, 174,
//     33, 194, 171, 117, 105, 250, 8, 187, 144, 83, 10, 158, 228, 200, 85, 165,
//     234, 31, 223, 98, 166, 204, 211, 229, 50, 124, 175, 215, 176, 100, 236, 191,
//     108, 74, 134, 62, 252, 136, 74, 115, 112, 157, 141, 239, 78, 72, 251, 16,
//     45, 82, 224, 159, 217, 13, 140, 208, 187, 144, 248, 183, 217, 44, 227, 203,
//     125, 222, 119, 195, 118, 179, 235, 10, 254, 63, 20, 215, 224, 184, 12, 43,
//     135, 254, 87, 128, 50, 95, 39, 203, 135, 222, 23, 106, 81, 228, 7, 160, 51,
//     225, 0, 174, 248, 145, 76, 170, 136, 57, 6, 53, 38, 116, 223, 32, 194, 76,
//     232, 101, 176, 237, 36, 246, 143, 142, 187, 145, 213, 185, 105, 57, 223,
//     213, 49, 152, 205, 63, 34, 248, 171, 13, 95, 122, 239, 151, 175, 201, 68,
//     113, 227, 46, 98, 6, 223, 21, 135, 0, 241, 81, 193, 85, 222, 188, 37, 188,
//     165, 229, 76, 90, 88, 161, 162, 228, 88, 254, 196, 84, 14, 48, 26, 147, 208,
//     172, 5, 8, 214, 58, 204, 142, 56, 38, 56, 92, 162, 234, 222, 64, 27, 205, 2,
//     3, 1, 0, 1,
//   ]);

//   const ser_encrypted_balance =
//     '0x5100000000000000300000000c00004039d4b14f88917aeb6dfbc6e80cd1a9208328ad7ce7236e059cd8aecbab8d997da4f62a2fb88802489ef911815b801501e40d1ee4da2df0bab03d41998dedbc09c4a2edaad8f17dbec1300000000c00004000091b4db2fb8c7eeb275c6e71ffe1a9dfccf08a8ea113cc60b6cf0989d7d1355036b5894a80817597e799fb0d39051c21177e9709b8979a80c7c9a5d15fd8f711103a2a1f77b72805';
//   const reencrypted_balance =
//     '0x0200000000000000180000000000000018020000000000005505a973d08e8697155eae175fdb934eb3a897eef6de6ae311418193d1744b69ac9d28787a4a062fa2d6fdfe2f857a6513fc6c2f41ab41206f9aa561ceda7fb2f9ec77db43ddb3278b2bf502710af58aa42719a12e113a99acdf11c253dad13d805ee22379395becc8b53af2d6e945e6b53f063fa54e4458ee816a3872194ec1fb1f40aa467fa2fd02d9a7b0680ea17f248a492aa4671156fd0c934fea56dccf4c861d9d3e02d3244611d26bd1079ba5652925aff8d1dfc00c7773e9998730f4d1b8415523b2cde8e0e9c004dca380df6e36c710526cba929bba8f29eff44bdadcda8afc9aed57030b1c2e62c9964e8652ea7f5b877615f11e901b8a9e47d5e656efb6ba30f63555a85a7d83ecce7e2225175a445d98a922ae8a2be7a299017bab8eb17f049c33c8372fce0ddef0ed97a6ea779e8a0f679786413d9d0237fe631d8fe46e617b1fb02beac689d984547651c328003ada1e66ca4ad9d212c2a16c5068ce4559d58032210b583a0d7398ece639cc2e623f470c3166e9138880594180ad5d82426f04b68f3081ddd98d06d045f86a19be0fd819c530febb8d00c66ebabd2f785b959276a8d55b08d11e2732bf10d952df0282315f6987205830fe58d66b93fb76ecad6ffdea261cd70b49674f2fbdbb8e44f99aed26027ac0e7ce28e999b21d0369ff357f3bec4478954495fdd4d01bd727ae0cea4e2c04629969cd3d9f7dc8e2fc8621ff903146e74ad81f1bfb92c685bdf397ec991876c9f0ffff54763baf56a9a6fad97f3b5f61792315d17d6343e44a002ec2ef74920fa2edb0340c2d274c604ca3ec47e741e238873c1976f13065d9dceb192c13476757f050be4f660ac7dd1cc3de9e5284271a91d6adf07cdccc396a04ca11633b6c2161269e53be090778c6326ae26482c52aa9d3bab24a3751274c8362b7de2c78279e5f56f055889d5c46f1d892458dad582feeebc87e106a17100dab302d6ae8a408ca60be1b808a5f4770b3a50735323c3a2acc0575942dd1431196e0cab2675d8461b4dfa56278acc189c9595c8bc03aae051bd57e9f5a869e85c08ed542606affc9298ebeec4dbba00e2033b2455848410b196c16ae57602b97c02a88e5124695b99b65c6e366f840c90f9eed7ce7333ab2adb439a435783e11b3cadea0d1d8f15c4bea49ae6ee83c62232711a07ee88c252ece87c3c8fa9b90f20fed4dae0c278fd6d5c8e07d4e6de8bcbeb5a7f793566c6a1a46a7b16d762120c699ba62860fd073c7d38b4784593fb16286e83957c6664a8fdcee59a60cf014b19562141782fd6ef3c7a57319d79bbd690d1d50c8375dd2195dc6b8f882243bf82bfb0541b2c8b9324fee0308b5f444319949441f354bba6a079a08a84e2fae606c04b1b302d1c8ff7e8a5f2bcc8e511ad9e598cdcc372e3d531002bff3eb18f583c150f95d3f';
//   const computer = new HTTPRelayComputer(
//     'http://127.0.0.1:8000/api/v1/openvector/rpc/',
//   );

//   await computer.connect();

//   const clientNode =
//     await make_cpu_crypto_system_rsa_reencryptor_client_node(computer);

//   const cs = clientNode.cryptosystem;
//   const reencryptor = clientNode.reencryptor;
//   const pk = clientNode.network_encryption_key;
//   const privateKey =
//     await reencryptor.deserialize_reencryption_private_key(ser_user_priv_key);
//   const user_reencryption_pub_key =
//     await clientNode.reencryptor.deserialize_reencryption_public_key(
//       ser_user_pub_key,
//     );
//   const ser_encrypted_balance_uint8 = new Uint8Array(
//     Math.ceil((ser_encrypted_balance.length-2) / 2),
//   );
//   for (let i = 0; i < ser_encrypted_balance_uint8.length; i++) {
//     ser_encrypted_balance_uint8[i] = parseInt(
//       ser_encrypted_balance.slice(i * 2 + 2, i * 2 + 4),
//       16,
//     );
//   }
//   const encrypted_balance = clientNode.cryptosystem.deserialize_ciphertext(
//     ser_encrypted_balance_uint8,
//   );
//   const ser_reencrypted_balance_uint8 = new Uint8Array(
//     Math.ceil((reencrypted_balance.length-2) / 2),
//   );
//   for (let i = 0; i < ser_reencrypted_balance_uint8.length; i++) {
//     ser_reencrypted_balance_uint8[i] = parseInt(
//       reencrypted_balance.slice(i * 2 + 2, i * 2 + 4),
//       16,
//     );
//   }
//   const splitted_reencrypted_balance =
//     await clientNode.reencryptor.split_reencrypted_partial_decryption_results(
//       ser_reencrypted_balance_uint8,
//     );
//   console.log(`Encrypted balance: ${ser_encrypted_balance_uint8}`);
//   console.log(`Reencrypted balance: ${ser_reencrypted_balance_uint8}`);
//   console.log(`Splitted reencrypted balance: ${splitted_reencrypted_balance}`);
//   const decrypted_balance = await clientNode.reencryptor.decrypt(
//     splitted_reencrypted_balance,
//     encrypted_balance,
//     privateKey,
//   );
//   expect(decrypted_balance.m).toEqual(2n);

// });
